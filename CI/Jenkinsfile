pipeline {
    agent any

    environment {
        PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        DOCKER_HOST = 'unix:///Users/pradyuman/.docker/run/docker.sock'
        DOCKER_IMAGE = "venkatesh1409/sample-nodejs-app"
        DOCKER_TAG   = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/iam-venkateshwarlu/Docker-example.git'
            }
        }

         stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "Docker user is: $DOCKER_USER"'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    // sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ./app"
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh 'trivy image --exit-code 0 --severity HIGH,CRITICAL $DOCKER_IMAGE:$DOCKER_TAG || true'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
                    docker push $DOCKER_IMAGE:$DOCKER_TAG
                    docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE:latest
                    docker push $DOCKER_IMAGE:latest
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig-cred']) {
                        sh '''
                            kubectl apply -f k8s/deployment.yaml
                            kubectl apply -f k8s/nodeport.yaml
                            kubectl apply -f k8s/service.yaml
                            kubectl rollout status deployment/sample-nodejs-app
                        '''
                    }
                }
            }
        }
    }
}
